[workspace]
resolver = "2"              # Important! wgpu/Bevy needs this!
members = ["macros", "cli"]

[workspace.package]
version = "0.1.50"
edition = "2021"
license = "MIT OR Apache-2.0"
readme = "README.md"
authors = ["Peter Hayman <peteyhayman@gmail.com>"]
description = "Rust Utilities"
documentation = "https://mrchantey.github.io/forky/docs"
repository = "https://github.com/mrchantey/sweet"

[workspace.dependencies]
sweet = { path = ".", version = "0.1.50" }
sweet_macros = { path = "./macros", version = "0.1.50" }
forky_core = "0.1.50"
forky_fs = "0.1.50"
forky_web = "0.1.50"
forky_cli = "0.1.50"


## utility
log = "0.4"
pretty_env_logger = "0.4"
anyhow = "1.0"
backtrace = "0.3.66"
inventory = "0.3.2"
extend = "1.1.2"

## game
bevy = "0.14"

### io ###
flume = "0.11.0"
clap = { version = "4.2.2", features = ["derive"] }
colorize = "0.1.0"
crossterm = "0.25.0"
dotenv = "0.15.0"
gag = "1.0.0"
glob = "0.3.1"
notify = "6.0.1"
notify-debouncer-full = "0.2.0"
serde = { version = "1.0.193", features = ["derive"] }
serde_json = "1.0.108"
ciborium = "0.2"

### async ###
futures = "0.3.28"
futures-util = "0.3.28"
tokio = { version = "1.27.0", features = [
	"macros",
	"rt",
	"rt-multi-thread",
	"time",
] }
tokio-stream = "0.1.14"
rayon = "1.7.0"

## math
getrandom = { version = "0.2.9", features = ["js"] }

## web
fantoccini = "0.19.3"

### wasm ###
leptos = { version = "0.6.10", features = ["csr", "nightly"] }
console_log = "1.0"
js-sys = "0.3.63"
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = "0.4.36"
console_error_panic_hook = "0.1.7"


### macros ###
proc-macro2 = "1.0.47"
syn = { version = "2.0.*", features = ["full"] }
quote = "1.0.21"
rstml = "0.11.2"
typed-builder = "0.18.0"

[package]
name = "sweet"
version = { workspace = true }
edition = { workspace = true }
authors = { workspace = true }
license = { workspace = true }
repository = { workspace = true }
readme = "README.md"
description = "A very pretty test runner for rust"
documentation = "https://mrchantey.github.io/forky/docs/sweet"
categories = ["development-tools::testing"]
keywords = [ # 5 at most
	"test",
	"unit",
	"e2e",
	"browser",
	"webdriver",
]

[features]
bevy = ["dep:bevy"]

[dependencies]
### internal ###
forky_core = { workspace = true }
sweet_macros = { workspace = true }

### misc ###
anyhow = { workspace = true }
getrandom = { workspace = true }
inventory = { workspace = true }
extend = { workspace = true }
flume = { workspace = true }

### console ###
log = { workspace = true }
pretty_env_logger = { workspace = true }
colorize = { workspace = true }
backtrace = { workspace = true }

### parse ###
serde = { workspace = true }
serde_json = { workspace = true }
glob = { workspace = true }

### async ###
rayon = { workspace = true }
futures = { workspace = true }

### bevy ###
bevy = { workspace = true, optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
console_log = { workspace = true }
forky_web = { workspace = true }
js-sys = { workspace = true }
wasm-bindgen = { workspace = true }
wasm-bindgen-futures = { workspace = true }
web-sys = { workspace = true }
leptos = { workspace = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { workspace = true }
clap = { workspace = true }
forky_fs = { workspace = true }
crossterm = { workspace = true }
gag = { workspace = true }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
forky_fs = { workspace = true }
fantoccini = { workspace = true }


[[example]]
name = "test_sweet"
path = "test/sweet.rs"
required-features = ["bevy"]

[[example]]
name = "test_sweet_wasm"
path = "test/sweet_wasm.rs"
# cant currently cicd windows wasm bevy
# required-features = ["bevy"]


[workspace.dependencies.web-sys]
version = "0.3.61"
features = [
	# HTML
	'Headers',
	'Document',
	'Element',
	'Window',
	'HtmlIFrameElement',
	'ResizeObserver',
	'ResizeObserverBoxOptions',
	'ResizeObserverEntry',
	'ResizeObserverOptions',
	'ResizeObserverSize',
	'DomRect',
	'DomRectReadOnly',
	# Style
	'MediaQueryList',
	# Events
	'MouseEvent',
	'KeyboardEvent',
	# JS
	'Gpu',
	'console',
	'Navigator',
	'Performance',
	'WebGl2RenderingContext',
	# Audio
	'AudioContext',
	'AudioDestinationNode',
	'AudioNode',
	'AudioParam',
	'BiquadFilterNode',
	'BiquadFilterOptions',
	'BiquadFilterType',
	'DelayNode',
	'DelayOptions',
	'GainNode',
	'OscillatorNode',
	'OscillatorType',
	# Fetch
	'Request',
	'RequestInit',
	'RequestMode',
	'Response',
	# Blob
	'Blob',
	'BlobEvent',
	'BlobEventInit',
	'BlobPropertyBag',
	# Elements
	'HtmlAnchorElement',
	'HtmlCanvasElement',
	'HtmlInputElement',
	'File',
	'FileList',
	# Url
	'Url',
	'History',
	'Location',
	'UrlSearchParams',
	# Sensors
	'DeviceOrientationEvent',
	'DeviceMotionEvent',
	'DeviceAcceleration',
	'DeviceRotationRate',
	# Sockets
	'BinaryType',
	'FileReader',
	'ErrorEvent',
	'MessageEvent',
	'ProgressEvent',
	'WebSocket',
	# XR
	'XrBoundedReferenceSpace',
	'XrEye',
	'XrFrame',
	'XrHandedness',
	'XrInputSource',
	'XrInputSourceArray',
	'XrInputSourceEvent',
	'XrInputSourceEventInit',
	'XrInputSourcesChangeEvent',
	'XrJointPose',
	'XrJointSpace',
	'XrPose',
	'XrReferenceSpace',
	'XrReferenceSpaceEvent',
	'XrReferenceSpaceEventInit',
	'XrReferenceSpaceType',
	'XrRenderState',
	'XrRenderStateInit',
	'XrRigidTransform',
	'XrSession',
	'XrSessionEvent',
	'XrSessionEventInit',
	'XrSessionInit',
	'XrSessionMode',
	'XrSpace',
	'XrTargetRayMode',
	'XrView',
	'XrViewerPose',
	'XrViewport',
	'XrVisibilityState',
	'XrWebGlLayer',
	'XrWebGlLayerInit',
	'XrSystem',
]
