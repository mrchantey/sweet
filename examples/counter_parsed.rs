// üç¨ AUTOGENERATED BY SWEET üç¨
// üç¨ AUTOGENERATED BY SWEET üç¨
// üç¨ AUTOGENERATED BY SWEET üç¨
use sweet::prelude::*;
fn main() {
    Server::default().run_once(());
    Server::default().run_once(Counter { value: 7 }.render());
    Server::default().run_once(Footer.render());
    Server::default()
        .run_once(
            sweet::noop! {
                { sweet::prelude::RsxParts { rust : vec![], html :
                PathOrInline::Inline("<Counter></Counter>".to_string()), css :
                PathOrInline::Inline("".to_string()), } }
            },
        );
}
struct Counter {
    value: i32,
}
impl Component for Counter {
    fn render(self) -> impl Rsx {
        sweet::noop! {
            { sweet::prelude::RsxParts { rust : vec![sweet::prelude::RsxRust::DynNodeId,
            sweet::prelude::RsxRust::InnerText({ self.value } .to_string()),
            sweet::prelude::RsxRust::DynNodeId, RsxRust::Event(Box::new(| _ | {})),],
            html :
            PathOrInline::Inline("<div ¬ß> the value is ¬ß</div><button ¬ß onclick=\"¬ß\">Increment</button><Footer></Footer>"
            .to_string()), css : PathOrInline::Inline("".to_string()), } }
        }
    }
}
struct Footer;
impl Component for Footer {
    fn render(self) -> impl Rsx {
        sweet::noop! {
            { sweet::prelude::RsxParts { rust : vec![], html :
            PathOrInline::Inline("<footer><div>sweet as!</div></footer>".to_string()),
            css : PathOrInline::Inline("".to_string()), } }
        }
    }
}
