// 🍬 AUTOGENERATED BY SWEET 🍬
// 🍬 AUTOGENERATED BY SWEET 🍬
// 🍬 AUTOGENERATED BY SWEET 🍬
#![allow(unused)]
use sweet::prelude::*;
fn main() {
    Server::default().run_once(());
    Server::default().run_once(Counter { value: 7 }.render());
    Server::default().run_once(Footer.render());
    Server::default()
        .run_once(
            sweet::noop! {
                { use sweet::prelude:: *; RsxParts { rust :
                std::collections::VecDeque::from([RustParts::Component(Counter { value :
                3, } .into_rsx_parts()),]), html : PathOrInline::Inline(HtmlPartial {
                nodes : vec![Node::Component(Vec::from([]))], }), } }
            },
        );
}
struct Counter {
    value: i32,
}
impl Component for Counter {
    fn render(self) -> impl Rsx {
        sweet::noop! {
            { use sweet::prelude:: *; RsxParts { rust :
            std::collections::VecDeque::from([RustParts::InnerText({ self.value }
            .to_string()), RustParts::Event(Box::new(| _ | {})),
            RustParts::Component(Footer {} .into_rsx_parts()),]), html :
            PathOrInline::Inline(HtmlPartial { nodes : vec![Node::Element(Element { tag :
            "div".to_string(), attributes : vec![], children :
            vec![Node::Text(" the value is ".to_string()), Node::TextBlock], self_closing
            : false, }), Node::Element(Element { tag : "button".to_string(), attributes :
            vec![Attribute::BlockValue { key : "onclick".to_string() }], children :
            vec![Node::Text("Increment".to_string())], self_closing : false, }),
            Node::Component(Vec::from([]))], }), } }
        }
    }
}
struct Footer;
impl Component for Footer {
    fn render(self) -> impl Rsx {
        sweet::noop! {
            { use sweet::prelude:: *; RsxParts { rust :
            std::collections::VecDeque::from([]), html : PathOrInline::Inline(HtmlPartial
            { nodes : vec![Node::Element(Element { tag : "footer".to_string(), attributes
            : vec![], children : vec![Node::Element(Element { tag : "div".to_string(),
            attributes : vec![], children : vec![Node::Text("sweet as!".to_string())],
            self_closing : false, })], self_closing : false, })], }), } }
        }
    }
}
